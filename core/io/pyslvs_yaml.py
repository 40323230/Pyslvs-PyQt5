# -*- coding: utf-8 -*-

"""YAML format processing function."""

__author__ = "Yuan Chang"
__copyright__ = "Copyright (C) 2016-2018"
__license__ = "AGPL"
__email__ = "pyslvs@gmail.com"

from typing import Dict, Any
import yaml
from core.QtModules import QObject
from core.libs import VPoint
from core.info import __version__
from core import main_window as mn
_major, _minor, _build, _label = __version__


class YamlEditor(QObject):

    """YAML reader and writer."""

    def __init__(self, parent: 'mn.MainWindow'):
        super(YamlEditor, self).__init__(parent)

        # Check file changed function.
        self.__check_file_changed = parent.checkFileChanged
        # Check workbook saved function.
        self.__workbook_saved = parent.workbookSaved

        # Call to get point expressions.
        self.__vpoints = parent.EntitiesPoint.data
        # Call to get link data.
        self.__vlinks_color = parent.EntitiesLink.colors
        # Call to get storage data.
        self.__storage_data_func = parent.getStorage
        # Call to get collections data.
        self.__collect_data_func = parent.CollectionTabPage.collect_data
        # Call to get triangle data.
        self.__triangle_data_func = parent.CollectionTabPage.triangle_data
        # Call to get inputs variables data.
        self.__inputs_data_func = parent.InputsWidget.inputPairs
        # Call to get algorithm data.
        self.__algorithm_data_func = parent.DimensionalSynthesis.mechanism_data
        # Call to get path data.
        self.__path_data_func = parent.InputsWidget.pathData

        # Call to load collections data.
        self.__load_collect_func = parent.CollectionTabPage.StructureWidget.addCollections
        # Call to load triangle data.
        self.__load_triangle_func = parent.CollectionTabPage.TriangularIterationWidget.addCollections
        # Call to load inputs variables data.
        self.__load_inputs_func = parent.InputsWidget.addInputsVariables
        # Call after loaded algorithm results.
        self.__load_algorithm_func = parent.DimensionalSynthesis.loadResults
        # Call after loaded paths.
        self.__load_path_func = parent.InputsWidget.loadPaths
        # Add empty links function.
        self.__add_links_func = parent.addEmptyLinks
        # Parse function.
        self.__parse_func = parent.parseExpression
        # Clear function for main window.
        self.__clear_func = parent.clear
        # Add storage function.
        self.__add_storage_func = parent.addMultipleStorage

        # File name. (Share with database)
        self.__set_file_name = parent.DatabaseWidget.setFileName
        self.file_name = lambda: parent.DatabaseWidget.file_name

    def save(self, file_name: str = ""):
        """Save YAML file."""
        if not file_name:
            file_name = self.file_name().absoluteFilePath()

        mechanism_data = []
        for vpoint in self.__vpoints():
            attr = {
                'links': vpoint.links,
                'type': vpoint.typeSTR,
                'x': vpoint.x,
                'y': vpoint.y,
            }
            if vpoint.type in {VPoint.P, VPoint.RP}:
                attr['angle'] = vpoint.angle
            mechanism_data.append(attr)

        data = {
            'mechanism': mechanism_data,

            'input': [{
                'base': b,
                'drive': d,
                'angle': a,
            } for b, d, a in self.__inputs_data_func()],

            'storage': dict(self.__storage_data_func()),

            'collection': self.__collect_data_func(),

            'triangle': self.__triangle_data_func(),

            'algorithm': eval(str(self.__algorithm_data_func())),

            'path': self.__path_data_func(),
        }
        yaml_script = yaml.dump(data, default_flow_style=False)
        with open(file_name, 'w') as f:
            f.write(
                f"# Generated by Pyslvs {_major}.{_minor}.{_build} ({_label})\n\n" +
                yaml_script
            )
        self.__set_file_name(file_name)

    def load(self, file_name: str = ""):
        """Load YAML file."""
        with open(file_name) as f:
            yaml_script = f.read()
        data: Dict[str, Any] = yaml.load(yaml_script)
        # TODO: Load function.
        self.__set_file_name(file_name)
