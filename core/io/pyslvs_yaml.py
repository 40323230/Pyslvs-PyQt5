# -*- coding: utf-8 -*-

"""YAML format processing function."""

__author__ = "Yuan Chang"
__copyright__ = "Copyright (C) 2016-2019"
__license__ = "AGPL"
__email__ = "pyslvs@gmail.com"

from typing import (
    Tuple,
    List,
    Sequence,
    Dict,
    Any,
)
import yaml
from core.QtModules import QObject
from core.libs import VJoint
from core.info import __version__
from core import main_window as mn
from .overview import OverviewDialog
_major, _minor, _build, _label = __version__


class YamlEditor(QObject):

    """YAML reader and writer."""

    def __init__(self, parent: 'mn.MainWindow'):
        super(YamlEditor, self).__init__(parent)

        # Check file changed function.
        self.__check_file_changed = parent.checkFileChanged
        # Check workbook saved function.
        self.__workbook_saved = parent.workbookSaved

        # Call to get point expressions.
        self.__vpoints = parent.EntitiesPoint.data
        # Call to get link data.
        self.__vlinks_color = parent.EntitiesLink.colors
        # Call to get storage data.
        self.__storage_data_func = parent.getStorage
        # Call to get collections data.
        self.__collect_data_func = parent.CollectionTabPage.collect_data
        # Call to get triangle data.
        self.__triangle_data_func = parent.CollectionTabPage.triangle_data
        # Call to get inputs variables data.
        self.__inputs_data_func = parent.InputsWidget.inputPairs
        # Call to get algorithm data.
        self.__algorithm_data_func = parent.DimensionalSynthesis.mechanism_data
        # Call to get path data.
        self.__path_data_func = parent.InputsWidget.pathData

        # Add empty links function.
        self.__add_links_func = parent.addEmptyLinks
        # Add points function.
        self.__add_points_func = parent.addPoints

        # Call to load inputs variables data.
        self.__load_inputs_func = parent.InputsWidget.addInputsVariables
        # Add storage function.
        self.__add_storage_func = parent.addMultipleStorage
        # Call to load paths.
        self.__load_path_func = parent.InputsWidget.loadPaths
        # Call to load collections data.
        self.__load_collect_func = parent.CollectionTabPage.StructureWidget.addCollections
        # Call to load triangle data.
        self.__load_triangle_func = parent.CollectionTabPage.TriangularIterationWidget.addCollections
        # Call to load algorithm results.
        self.__load_algorithm_func = parent.DimensionalSynthesis.loadResults

        # Clear function for main window.
        self.__clear_func = parent.clear

        # File name. (Share with database)
        self.__set_file_name = parent.DatabaseWidget.setFileName
        self.file_name = lambda: parent.DatabaseWidget.file_name

    def save(self, file_name: str = ""):
        """Save YAML file."""
        if not file_name:
            file_name = self.file_name().absoluteFilePath()

        mechanism_data = []
        for vpoint in self.__vpoints():
            attr = {
                'links': vpoint.links,
                'type': vpoint.type,
                'x': vpoint.x,
                'y': vpoint.y,
            }
            if vpoint.type in {VJoint.P, VJoint.RP}:
                attr['angle'] = vpoint.angle
            mechanism_data.append(attr)

        data = {
            'mechanism': mechanism_data,

            'links': self.__vlinks_color(),

            'input': [{'base': b, 'drive': d} for b, d, a in self.__inputs_data_func()],

            'storage': list(self.__storage_data_func()),

            'collection': self.__collect_data_func(),

            'triangle': self.__triangle_data_func(),

            'algorithm': eval(str(self.__algorithm_data_func())),

            'path': self.__path_data_func(),
        }
        yaml_script = yaml.dump(data, default_flow_style=False)
        with open(file_name, 'w', encoding='utf-8') as f:
            f.write(
                f"# Generated by Pyslvs {_major}.{_minor}.{_build} ({_label})\n\n" +
                yaml_script
            )
        self.__set_file_name(file_name)

    def load(self, file_name: str = ""):
        """Load YAML file."""
        if self.__check_file_changed():
            return

        with open(file_name, encoding='utf-8') as f:
            yaml_script = f.read()
        data: Dict[str, Any] = yaml.load(yaml_script)

        # Clear first.
        self.__clear_func()

        # Links data.
        links_data: Dict[str, str] = data.get('links', {})
        self.__add_links_func(links_data)

        # Mechanism data.
        mechanism_data: List[Dict[str, Any]] = data.get('mechanism', [])
        p_attr = []
        try:
            for point_attr in mechanism_data:
                p_x: float = point_attr['x']
                p_y: float = point_attr['y']
                p_links: Tuple[str] = point_attr['links']
                p_type: int = point_attr['type']
                if p_type in {VJoint.P, VJoint.RP}:
                    p_angle: float = point_attr['angle']
                else:
                    p_angle = 0.
                p_attr.append((p_x, p_y, ','.join(p_links), 'Green', p_type, p_angle))
        except KeyError:
            pass
        else:
            self.__add_points_func(p_attr)

        # Input data.
        input_data: List[Dict[str, int]] = data.get('input', [])
        i_attr = []
        try:
            for input_attr in input_data:
                i_base = input_attr['base']
                i_drive = input_attr['drive']
                i_attr.append((i_base, i_drive))
        except KeyError:
            pass
        else:
            self.__load_inputs_func(i_attr)

        # Storage data.
        storage_data: List[Tuple[str, str]] = data.get('storage', [])
        self.__add_storage_func(storage_data)

        # Path data.
        path_data: Dict[str, Sequence[Tuple[float, float]]] = data.get('path', {})
        self.__load_path_func(path_data)

        # Collection data.
        collection_data: List[Tuple[Tuple[int, int], ...]] = data.get('collection', [])
        self.__load_collect_func(collection_data)

        # Triangle data.
        triangle_data: Dict[str, Dict[str, Any]] = data.get('triangle', {})
        self.__load_triangle_func(triangle_data)

        # Algorithm data.
        algorithm_data: List[Dict[str, Any]] = data.get('algorithm', [])
        self.__load_algorithm_func(algorithm_data)

        # Workbook loaded.
        self.__set_file_name(file_name)
        self.__workbook_saved()

        # Show overview dialog.
        dlg = OverviewDialog(
            self.parent(),
            f"Open file: {file_name}",
            storage_data,
            i_attr,
            path_data,
            collection_data,
            triangle_data,
            algorithm_data
        )
        dlg.show()
        dlg.exec_()
